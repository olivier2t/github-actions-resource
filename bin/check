#!/bin/bash

set -e

exec 5>&1 # make stdout available as fd 5 for the result
exec 1>&2 # redirect all output to stderr for logging

main() {
  extractVersion
  checkMandatorySourceConfig
  getRuns
  emitResult
}

extractVersion() {
  # Extracting requested version
  requestedVersion=$(jq -r '.version.run_id' < $payload)
  if [ "${requestedVersion}" = "null" -o ${#requestedVersion} -le 3 ]; then
    jq  -n '[]' >&5
    exit 0
  fi
}

checkMandatorySourceConfig() {
  # check mandatory source config
  if [ "${source_owner}" = "null" -o ${#source_owner} -le 3 ]; then
    echo "--> Failed to create a new GitHub Actions Workflow run via dispatches."
    echo "owner parameter is missing."
    echo
    echo "Aborting job..."
    jq  -n '[]' >&5
    exit 1
  fi
  if [ "${source_repo}" = "null" -o ${#source_repo} -le 3 ]; then
    echo "--> Failed to create a new GitHub Actions Workflow run via dispatches."
    echo "repo parameter is missing."
    echo
    echo "Aborting job..."
    jq  -n '[]' >&5
    exit 1
  fi
  if [ "${source_token}" = "null" -o ${#source_token} -le 3 ]; then
    echo "--> Failed to create a new GitHub Actions Workflow run via dispatches."
    echo "token parameter is missing."
    echo
    echo "Aborting job..."
    jq  -n '[]' >&5
    exit 1
  fi
}

getRuns() {
  # Retrieving GitHub Actions workflow run details
  # cmd="curl -s -L -X GET \
  # -H 'Accept: application/vnd.github+json' \
  # -H 'Authorization: Bearer ${source_token}' \
  # -H 'X-GitHub-Api-Version: 2022-11-28' \
  # ${source_base_url}/repos/${source_owner}/${source_repo}/actions/runs/${requestedVersion}"
  
  # response_body=$(mktemp /tmp/response_body.XXXXXX)
  # eval "$cmd" > $response_body || exit $1

  # run_id=$(cat $response_body | jq -r ".id")
  # workflow_id=$(cat $response_body | jq -r ".workflow_id")

  # Retrieving GitHub Actions workflow runs for our current workflow
  cmd="curl -s -L -X GET \
  -H 'Accept: application/vnd.github+json' \
  -H 'Authorization: Bearer ${source_token}' \
  -H 'X-GitHub-Api-Version: 2022-11-28' \
  ${source_base_url}/repos/${source_owner}/${source_repo}/actions/workflows/${source_workflow}/runs"

  response_body=$(mktemp /tmp/response_body.XXXXXX)
  eval "$cmd" > $response_body || exit $1
  run_ids=$(cat $response_body | jq -r '.workflow_runs[]?.id?')
  echo "run_ids: ${run_ids}"
}

emitResult() {
  payload="[]"
  for row in $(echo "${run_ids}" | jq -r '.[] | tostring'); do
    payload=$(echo $payload | jq -r --arg ref ${row} '. += [{"ref":$ref}]')
  done
  echo "payload: ${payload}"
  echo $payload >&5
}

if [ "${BASH_SOURCE[0]}" == "${0}" ]; then
  source $(dirname $0)/common
  main "$@"
fi