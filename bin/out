#!/bin/bash

set -e

exec 5>&1 # make stdout available as fd 5 for the result
exec 1>&2 # redirect all output to stderr for logging

main() {
  checkMandatorySourceConfig
  sourcesDirectory $1
  putResource
  emitResult
}

checkMandatorySourceConfig() {
  # check mandatory source config
  if [ "${source_owner}" = "null" -o ${#source_owner} -le 3 ]; then
    echo "--> Failed to create a new GitHub Actions Workflow run via dispatches."
    echo "owner parameter is missing."
    echo
    echo "Aborting job..."
    jq  -n '[]' >&5
    exit 1
  fi
  if [ "${source_repo}" = "null" -o ${#source_repo} -le 3 ]; then
    echo "--> Failed to create a new GitHub Actions Workflow run via dispatches."
    echo "repo parameter is missing."
    echo
    echo "Aborting job..."
    jq  -n '[]' >&5
    exit 1
  fi
  if [ "${source_workflow}" = "null" -o ${#source_workflow} -le 3 ]; then
    echo "--> Failed to create a new GitHub Actions Workflow run via dispatches."
    echo "workflow parameter is missing."
    echo
    echo "Aborting job..."
    jq  -n '[]' >&5
    exit 1
  fi
  if [ "${source_ref}" = "null" -o ${#source_ref} -le 3 ]; then
    echo "--> Failed to create a new GitHub Actions Workflow run via dispatches."
    echo "ref parameter is missing."
    echo
    echo "Aborting job..."
    jq  -n '[]' >&5
    exit 1
  fi
  if [ "${source_token}" = "null" -o ${#source_token} -le 3 ]; then
    echo "--> Failed to create a new GitHub Actions Workflow run via dispatches."
    echo "token parameter is missing."
    echo
    echo "Aborting job..."
    jq  -n '[]' >&5
    exit 1
  fi
}

sourcesDirectory() {
  sources_dir=${1:-`echo $TMPDIR`}
  cd $sources_dir
}

putResource() {
  # List GitHub Actions workflow runs before triggering ours
  cmd="curl -s -L -X GET \
  -H 'Accept: application/vnd.github+json' \
  -H 'Authorization: Bearer ${source_token}' \
  -H 'X-GitHub-Api-Version: 2022-11-28' \
  ${source_base_url}/repos/${source_owner}/${source_repo}/actions/workflows/${source_workflow}/runs"

  response_body=$(mktemp /tmp/response_body.XXXXXX)
  eval "$cmd" > $response_body || exit $1
  run_ids_before=$(cat $response_body | jq -r '.workflow_runs[]?.id?')


  payload="{}"
  payload=$(echo $payload | jq -r --arg gh_ref ${source_ref} '. += {"ref":$gh_ref}')
  variables_entries=$(echo "${source_variables}" | jq -r '. | to_entries')
  echo "=== variables entries ==="
  echo ${variables_entries}
  for row in $(echo "${variables_entries}" | jq -r '.[] | @base64'); do
      _jq() {
      echo ${row} | base64 -d | jq -r ${1}
      }
      echo "=== variable ==="
      echo ${row} | base64 -d  
      payload=$(echo $payload | jq -r --arg key $(_jq '.key') --arg val $(_jq '.value') '.inputs += { ($key) : $val}')
  done

  cmd="curl -s -L -X POST \
  -H 'Accept: application/vnd.github+json' \
  -H 'Authorization: Bearer ${source_token}' \
  -H 'X-GitHub-Api-Version: 2022-11-28' \
  ${source_base_url}/repos/${source_owner}/${source_repo}/actions/workflows/${source_workflow}/dispatches \
  -d '${payload}'"

  response_body=$(mktemp /tmp/response_body.XXXXXX)
  eval "$cmd" > $response_body || exit $1
  cp ${response_body} ${sources_dir}/response_body
  message=$(cat ${response_body} | jq -r '.message?')
  if [ ${#message} -eq 0 ]; then
    echo "--> GitHub Actions Workflow run created using dispatches..."
    cat ${response_body}
  else
    echo "--> Failed to create a new GitHub Actions Workflow run via dispatches."
    echo "GitHub Actions error message was:"
    echo $message
    echo
    echo "Aborting job..."
    exit 1
  fi

  # Fetching GitHub Actions Workflow run ID
  run_id=""
  until [ -n "${run_id}" ]; do
    sleep 1
    cmd="curl -s -L -X GET \
    -H 'Accept: application/vnd.github+json' \
    -H 'Authorization: Bearer ${source_token}' \
    -H 'X-GitHub-Api-Version: 2022-11-28' \
    ${source_base_url}/repos/${source_owner}/${source_repo}/actions/workflows/${source_workflow}/runs"

    response_body=$(mktemp /tmp/response_body.XXXXXX)
    eval "$cmd" > $response_body || exit $1
    run_ids_after=$(cat $response_body | jq -r '.workflow_runs[].id?')
    # check if we have a new run id
    for rid in $(echo "${run_ids_after}"); do
      sleep 1
      if [ $(echo $run_ids_before | grep $rid | wc -l) -eq 0 ]; then
        run_id=$rid
        echo "Workflow Run ID: ${run_id}"
      fi
    done
  done
}

emitResult() {
  jq  --arg run_id "$run_id" \
      --arg source_workflow "$source_workflow" \
      -n '{
    "version": {
      "run_id": $run_id
    },
    "metadata": [
      { "name": "workflow_id", "value": $source_workflow }
    ]
  }' >&5
}

if [ "${BASH_SOURCE[0]}" == "${0}" ]; then
  source $(dirname $0)/common
  main "$@"
fi
