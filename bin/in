#!/bin/bash

set -e

exec 5>&1 # make stdout available as fd 5 for the result
exec 1>&2 # redirect all output to stderr for logging

main() {
  checkMandatorySourceConfig
  targetDirectory $1
  extractVersion
  waitForCompletion
  emitResult
}

checkMandatorySourceConfig() {
  # check mandatory source config
  if [ "${source_owner}" = "null" -o ${#source_owner} -le 3 ]; then
    echo "--> Failed to create a new GitHub Actions Workflow run via dispatches."
    echo "owner parameter is missing."
    echo
    echo "Aborting job..."
    jq  -n '[]' >&5
    exit 1
  fi
  if [ "${source_repo}" = "null" -o ${#source_repo} -le 3 ]; then
    echo "--> Failed to create a new GitHub Actions Workflow run via dispatches."
    echo "repo parameter is missing."
    echo
    echo "Aborting job..."
    jq  -n '[]' >&5
    exit 1
  fi
  if [ "${source_token}" = "null" -o ${#source_token} -le 3 ]; then
    echo "--> Failed to create a new GitHub Actions Workflow run via dispatches."
    echo "token parameter is missing."
    echo
    echo "Aborting job..."
    jq  -n '[]' >&5
    exit 1
  fi
}

targetDirectory() {
  target_dir=${1:-`echo $TMPDIR`}
}

extractVersion() {
  # Extracting requested version..."
  requestedVersion=$(jq -r '.version.run_id // ""' < $payload)
}

waitForCompletion() {
  echo "--> Retrieving GitHub Actions workflow run details ..."
  duration=0
  until [ "${run_status}" = "completed" -o "${run_status}" = "action_required" -o "${run_status}" = "cancelled" -o "${run_status}" = "failure" -o "${run_status}" = "neutral" -o "${run_status}" = "skipped" -o "${run_status}" = "stale" -o "${run_status}" = "success" -o "${run_status}" = "timed_out" ]; do
    sleep 10
    duration="$((duration+10))"

    cmd="curl -s -L -X GET \
    -H 'Accept: application/vnd.github+json' \
    -H 'Authorization: Bearer ${source_token}' \
    -H 'X-GitHub-Api-Version: 2022-11-28' \
    ${source_base_url}/repos/${source_owner}/${source_repo}/actions/runs/${requestedVersion}"
    
    response_body=$(mktemp /tmp/response_body.XXXXXX)
    eval "$cmd" > $response_body || exit $1

    run_id=$(cat $response_body | jq -r ".id")
    run_status=$(cat $response_body | jq -r ".status")
    workflow_id=$(cat $response_body | jq -r ".workflow_id")
    created_at=$(cat $response_body | jq -r ".created_at")
    html_url=$(cat $response_body | jq -r ".html_url")

    echo "Waiting for workflow run to complete. Current status: ${run_status} (${duration}s)"
  done

  writePipelineLogs

  if [ "${run_status}" = "completed" -o "${run_status}" = "success" ]; then
    echo "Workflow run ID ${run_id} completed successfully."
  else
    echo "Workflow run ID ${run_id} did not complete successfully (status: ${run_status})"
    echo "--> GitHub Actions Workflow run URL: ${html_url}"
    exit 1;
  fi
}

writePipelineLogs() {
  # Get Logs for run
  cmd="curl -s -L -X GET \
  -H 'Accept: application/vnd.github+json' \
  -H 'Authorization: Bearer ${source_token}' \
  -H 'X-GitHub-Api-Version: 2022-11-28' \
  ${source_base_url}/repos/${source_owner}/${source_repo}/actions/runs/${run_id}/logs"

  response_body=$(mktemp /tmp/response_body.XXXXXX)
  eval "$cmd" > $response_body || exit $1
  cp ${response_body} ${target_dir}/run_logs

  echo ">>>>>>> Workflow Run Completion Report" >${target_dir}/run_report
  echo "Run ID: ${run_id}" >>${target_dir}/run_report
  echo "Workflow id: ${workflow_id}" >>${target_dir}/run_report
  echo "Run Status: ${run_status}" >>${target_dir}/run_report
  echo "Created at: ${created_at}" >>${target_dir}/run_report
  echo "HTML URL: ${html_url}" >>${target_dir}/run_report
  echo "<<============== START OF TRACE ===============>>" >>${target_dir}/run_report
  cat ${response_body} >>${target_dir}/run_report
  echo "<<=============== END OF TRACE ===============>>" >>${target_dir}/run_report
}

emitResult() {
  jq  --arg id "$run_id" \
      --arg status "$run_status" \
      --arg workflow_id "$workflow_id" \
      --arg created_at "$created_at" \
      --arg html_url "$html_url" \
      -n '{
    "version": {
      "run_id": $id
    },
    "metadata": [
      { "name": "status", "value": $status },
      { "name": "workflow_id", "value": $workflow_id },
      { "name": "created_at", "value": $created_at },
      { "name": "html_url", "value": $html_url }
    ]
  }' >&5
}

if [ "${BASH_SOURCE[0]}" == "${0}" ]; then
  source $(dirname $0)/common
  main "$@"
fi
